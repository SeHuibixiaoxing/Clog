Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BUNDLE
    EQUAL

Grammar

Rule 0     S' -> compUnit
Rule 1     empty -> <empty>
Rule 2     compUnit -> empty
Rule 3     compUnit -> compUnit compUnit
Rule 4     compUnit -> decl
Rule 5     compUnit -> cir_function
Rule 6     compUnit -> function
Rule 7     compUnit -> module
Rule 8     compUnit -> bundle
Rule 9     decl -> constDecl
Rule 10    decl -> varDecl
Rule 11    decl -> cirDecl
Rule 12    decl -> modDecl
Rule 13    decl -> bundleDecl
Rule 14    constDecl_repeat -> empty
Rule 15    constDecl_repeat -> , constDef constDecl_repeat
Rule 16    constDecl -> CONST val_type constDef constDecl_repeat ;
Rule 17    cir_basic_type -> REG
Rule 18    cir_basic_type -> WIRE
Rule 19    cir_basic_type -> CLOCK
Rule 20    val_type -> INT
Rule 21    val_type -> FLOAT
Rule 22    value_type -> val_type
Rule 23    value_type -> cir_type
Rule 24    array -> empty
Rule 25    array -> [ constExp ] array
Rule 26    constDef -> ID array ASSIGN constInitVal
Rule 27    constInitVal_repeat -> empty
Rule 28    constInitVal_repeat -> , constInitVal constInitVal_repeat
Rule 29    constInitVal -> constExp
Rule 30    varDef_repeat -> empty
Rule 31    varDef_repeat -> , varDef varDef_repeat
Rule 32    varDecl -> val_type varDef varDef_repeat ;
Rule 33    varDef -> ID array
Rule 34    varDef -> ID array ASSIGN initVal
Rule 35    modDecl -> ID ID ( module_R_params )
Rule 36    R_port_def -> IN .
Rule 37    R_port_def -> OUT .
Rule 38    R_port_def -> INOUT .
Rule 39    p_module_R_params_item -> R_port_def ID ( ID )
Rule 40    module_R_params_repeat -> empty
Rule 41    module_R_params_repeat -> , p_module_R_params_item p_module_R_params_repeat
Rule 42    module_R_params -> p_module_R_params_item module_R_params_repeat
Rule 43    bundleDecl_repeat -> empty
Rule 44    bundleDecl_repeat -> , bundleDef bundleDecl_repeat
Rule 45    bundleDecl -> ID bundleDef bundleDecl_repeat
Rule 46    bundleDef -> ID array
Rule 47    initVal -> exp ;
Rule 48    cirDecl_repeat -> empty
Rule 49    cirDecl_repeat -> , cirDef cirDecl_repeat
Rule 50    cirDecl -> cir_type cirDef p_cirDecl_repeat ;
Rule 51    cirDef -> ID array
Rule 52    cirDef -> ID array ASSIGN initVal
Rule 53    cir_function -> cir_type ID ( cir_funcFParams ) block
Rule 54    function -> val_type ID ( funcFParams ) block
Rule 55    cir_funcFParams_repeat -> empty
Rule 56    cir_funcFParams_repeat -> , cir_funcFParam cir_funcFParams_repeat
Rule 57    cir_funcFParams -> cir_funcFParam cir_funcFParams_repeat
Rule 58    funcFParams_repeat -> empty
Rule 59    funcFParams_repeat -> , funcFParam funcFParams_repeat
Rule 60    funcFParams -> funcFParam funcFParams_repeat
Rule 61    cir_funcParam -> type_def ID array
Rule 62    funcFParam -> val_type ID array
Rule 63    module_para_para -> empty
Rule 64    module_para_para -> PARA ID , module_para_para
Rule 65    p_module_para_port -> empty
Rule 66    p_module_para_port -> , port_def ID p_module_para_port
Rule 67    module -> MODULE ID ( module_para_para port_def ID p_module_para_port
Rule 68    bundle_repeat -> empty
Rule 69    bundle_repeat -> , cir_type ID bundle bundle_repeat
Rule 70    bundle -> BUNDULE ID ( cir_type ID p_bundle_repeat )
Rule 71    block_repeat -> empty
Rule 72    block_repeat -> blockItem block_repeat
Rule 73    block -> { block_repeat }
Rule 74    blockItem -> decl
Rule 75    blockItem -> stmt
Rule 76    stmt -> lVal ASSIGN exp ;
Rule 77    stmt -> lVal CONNECT exp ;
Rule 78    stmt -> ;
Rule 79    stmt -> exp
Rule 80    stmt -> block
Rule 81    stmt -> seqLogStmt
Rule 82    stmt -> ifStmt
Rule 83    stmt -> forStmt
Rule 84    stmt -> RETURN exp ;
Rule 85    seqLogStmt -> WHEN ( ID ) stmt
Rule 86    seqLogStmt -> WHEN ( ID . RISING ) stmt
Rule 87    seqLogStmt -> WHEN ( ID . FALLING ) stmt
Rule 88    elifStmt -> ELIF ( exp ) stmt elifStmt
Rule 89    elifStmt -> empty
Rule 90    elseStmt -> ELSE stmt
Rule 91    ifStmt -> IF ( exp ) stmt elifStmt elseStmt
Rule 92    forStmt -> FOR ( varDecl ; exp ; exp ) stmt
Rule 93    forStmt -> GENERATE FOR ( varDecl ; exp ; exp ) COLON ID stmt
Rule 94    exp -> lOrExp
Rule 95    lVal -> ID array_exp_repeat1
Rule 96    lVal -> ID array_exp_repreat2
Rule 97    lVal -> { ID array_exp_repeat1 lVal_repeat }
Rule 98    lVal -> { ID array_exp_repreat2 lVal_repeat }
Rule 99    lVal -> MUX ( exp , exp , exp )
Rule 100   lVal -> lVal . ID
Rule 101   primaryExp -> ( exp )
Rule 102   primaryExp -> lVal
Rule 103   primaryExp -> number
Rule 104   lVal_repeat -> empty
Rule 105   lVal_repeat -> , lVal lVal_repeat
Rule 106   array_exp_repeat1 -> empty
Rule 107   array_exp_repeat1 -> [ exp ] array_exp_repeat1
Rule 108   array_exp_repreate2 -> empty
Rule 109   array_exp_repreate2 -> [ exp COLON exp ] array_exp_repeat2
Rule 110   number -> INTEGER_CONST
Rule 111   number -> FLOAT_CONST
Rule 112   number -> circuit_const
Rule 113   circuit_const -> exp BIT_WIDTH_NUMBER
Rule 114   unaryExp -> primaryExp
Rule 115   unaryExp -> ID ( )
Rule 116   unaryExp -> ID ( funcRPramas )
Rule 117   unaryExp -> SIGNAL ( unaryExp )
Rule 118   unaryExp -> unaryOp unaryExp
Rule 119   unaryOp -> ADD
Rule 120   unaryOp -> SUB
Rule 121   unaryOp -> NOT
Rule 122   unaryOp -> NOTL
Rule 123   funcRParmas -> exp
Rule 124   funcRParmas -> exp exp_repreat
Rule 125   exp_repeat -> , exp exp_repeat
Rule 126   mulExp -> unaryExp
Rule 127   mulExp -> mulExp MUL unaryExp
Rule 128   mulExp -> mulExp DIV unaryExp
Rule 129   mulExp -> mulExp MOD unaryExp
Rule 130   mulExp -> mulExp POWER unaryExp
Rule 131   addExp -> mulExp
Rule 132   addExp -> addExp ADD mulExp
Rule 133   addExp -> addExp SUB mulExp
Rule 134   shiftExp -> addExp
Rule 135   shiftExp -> shiftExp SLL addExp
Rule 136   shiftExp -> shiftExp SRL addExp
Rule 137   shiftExp -> shiftExp SRA addExp
Rule 138   relExp -> shiftExp
Rule 139   relExp -> relExp LT addExp
Rule 140   relExp -> relExp GT addExp
Rule 141   relExp -> relExp GE addExp
Rule 142   relExp -> relExp LE addExp
Rule 143   eqExp -> relExp
Rule 144   eqExp -> eqExp LT eqExp
Rule 145   eqExp -> eqExp GT eqExp
Rule 146   eqExp -> eqExp GE eqExp
Rule 147   eqExp -> eqExp LE eqExp
Rule 148   eqExp -> eqExp EQ eqExp
Rule 149   eqExp -> eqExp NEQ eqExp
Rule 150   redExp -> eqExp
Rule 151   redExp -> AND eqExp
Rule 152   redExp -> OR eqExp
Rule 153   redExp -> NOT eqExp
Rule 154   redExp -> XOR eqExp
Rule 155   redExp -> XNOR eqExp
Rule 156   lAndExp -> redExp
Rule 157   lAndExp -> lAndExp LAND redExp
Rule 158   lOrExp -> lAndExp
Rule 159   lOrExp -> lOrExp LOR lAndExp
Rule 160   cir_type -> REG
Rule 161   cir_type -> WIRE
Rule 162   cir_type -> CLOCK
Rule 163   port_def -> INPUT
Rule 164   port_def -> OUTPUT
Rule 165   port_def -> INOUT

Terminals, with rules where they appear

(                    : 35 39 53 54 67 70 85 86 87 88 91 92 93 99 101 115 116 117
)                    : 35 39 53 54 70 85 86 87 88 91 92 93 99 101 115 116 117
,                    : 15 28 31 41 44 49 56 59 64 66 69 99 99 105 125
.                    : 36 37 38 86 87 100
;                    : 16 32 47 50 76 77 78 84 92 92 93 93
ADD                  : 119 132
AND                  : 151
ASSIGN               : 26 34 52 76
BIT_WIDTH_NUMBER     : 113
BUNDLE               : 
CLOCK                : 19 162
COLON                : 93 109
CONNECT              : 77
CONST                : 16
DIV                  : 128
ELIF                 : 88
ELSE                 : 90
EQUAL                : 
FALLING              : 87
FLOAT                : 21
FLOAT_CONST          : 111
FOR                  : 92 93
GE                   : 141 146
GENERATE             : 93
GT                   : 140 145
ID                   : 26 33 34 35 35 39 39 45 46 51 52 53 54 61 62 64 66 67 67 69 70 70 85 86 87 93 95 96 97 98 100 115 116
IF                   : 91
IN                   : 36
INOUT                : 38 165
INPUT                : 163
INT                  : 20
INTEGER_CONST        : 110
LAND                 : 157
LE                   : 142 147
LOR                  : 159
LT                   : 139 144
MOD                  : 129
MODULE               : 67
MUL                  : 127
MUX                  : 99
NEQ                  : 149
NOT                  : 121 153
NOTL                 : 122
OR                   : 152
OUT                  : 37
OUTPUT               : 164
PARA                 : 64
POWER                : 130
REG                  : 17 160
RETURN               : 84
RISING               : 86
SIGNAL               : 117
SLL                  : 135
SRA                  : 137
SRL                  : 136
SUB                  : 120 133
WHEN                 : 85 86 87
WIRE                 : 18 161
XNOR                 : 155
XOR                  : 154
[                    : 25 107 109
]                    : 25 107 109
error                : 
{                    : 73 97 98
}                    : 73 97 98

Nonterminals, with rules where they appear

BUNDULE              : 70
EQ                   : 148
R_port_def           : 39
addExp               : 132 133 134 135 136 137 139 140 141 142
array                : 25 26 33 34 46 51 52 61 62
array_exp_repeat1    : 95 97 107
array_exp_repeat2    : 109
array_exp_repreat2   : 96 98
array_exp_repreate2  : 
block                : 53 54 80
blockItem            : 72
block_repeat         : 72 73
bundle               : 8 69
bundleDecl           : 13
bundleDecl_repeat    : 44 45
bundleDef            : 44 45
bundle_repeat        : 69
cirDecl              : 11
cirDecl_repeat       : 49
cirDef               : 49 50
cir_basic_type       : 
cir_funcFParam       : 56 57
cir_funcFParams      : 53
cir_funcFParams_repeat : 56 57
cir_funcParam        : 
cir_function         : 5
cir_type             : 23 50 53 69 70
circuit_const        : 112
compUnit             : 3 3 0
constDecl            : 9
constDecl_repeat     : 15 16
constDef             : 15 16
constExp             : 25 29
constInitVal         : 26 28
constInitVal_repeat  : 28
decl                 : 4 74
elifStmt             : 88 91
elseStmt             : 91
empty                : 2 14 24 27 30 40 43 48 55 58 63 65 68 71 89 104 106 108
eqExp                : 144 144 145 145 146 146 147 147 148 148 149 149 150 151 152 153 154 155
exp                  : 47 76 77 79 84 88 91 92 92 93 93 99 99 99 101 107 109 109 113 123 124 125
exp_repeat           : 125
exp_repreat          : 124
forStmt              : 83
funcFParam           : 59 60
funcFParams          : 54
funcFParams_repeat   : 59 60
funcRParmas          : 
funcRPramas          : 116
function             : 6
ifStmt               : 82
initVal              : 34 52
lAndExp              : 157 158 159
lOrExp               : 94 159
lVal                 : 76 77 100 102 105
lVal_repeat          : 97 98 105
modDecl              : 12
module               : 7
module_R_params      : 35
module_R_params_repeat : 42
module_para_para     : 64 67
mulExp               : 127 128 129 130 131 132 133
number               : 103
p_bundle_repeat      : 70
p_cirDecl_repeat     : 50
p_module_R_params_item : 41 42
p_module_R_params_repeat : 41
p_module_para_port   : 66 67
port_def             : 66 67
primaryExp           : 114
redExp               : 156 157
relExp               : 139 140 141 142 143
seqLogStmt           : 81
shiftExp             : 135 136 137 138
stmt                 : 75 85 86 87 88 90 91 92 93
type_def             : 61
unaryExp             : 117 118 126 127 128 129 130
unaryOp              : 118
val_type             : 16 22 32 54 62
value_type           : 
varDecl              : 10 92 93
varDef               : 31 32
varDef_repeat        : 31 32

